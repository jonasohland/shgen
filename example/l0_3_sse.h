/*
    Generated by shgen, a code-generator based on the work of Peter-Pike Sloan, with additions by Jonas Ohland.
    Find more information about the algorithm here: http://jcgt.org/published/0002/02/06/
    The shgen tool can be found here: https://github.com/jonasohland/shgen

    Generated Tue Jun  2 22:09:05 2020 UTC by the command: 
    shgen -C -L 3 --sse 
*/

#include <mmintrin.h>
#include <xmmintrin.h>

#define SHGEN_IGNORE_UNUSED(expr) do { (void)(expr); } while (0)

void SHEval0(const float *pX, const float *pY, const float *pZ, float *pSH)
{
    SHGEN_IGNORE_UNUSED(pX);
    SHGEN_IGNORE_UNUSED(pY);
    SHGEN_IGNORE_UNUSED(pZ);

    _mm_store_ps(pSH + 0 * 4,_mm_set_ps1(0.2820947917738781f));
}

void SHEval1(const float *pX, const float *pY, const float *pZ, float *pSH)
{
    __m128 fX, fY, fZ;
    __m128 fC0, fC1, fS0, fS1, fTmpA, fTmpB, fTmpC;

    fX = _mm_load_ps(pX);
    fY = _mm_load_ps(pY);    
    fZ = _mm_load_ps(pZ);


    _mm_store_ps(pSH + 0 * 4,_mm_set_ps1(0.2820947917738781f));
    _mm_store_ps(pSH + 2 * 4,_mm_mul_ps(_mm_set_ps1(0.4886025119029199f),fZ));

    fC0 = fX;
    fS0 = fY;

    fTmpB = _mm_set_ps1(0.48860251190292f);
    _mm_store_ps(pSH + 3 * 4,_mm_mul_ps(fTmpB,fC0));
    _mm_store_ps(pSH + 1 * 4,_mm_mul_ps(fTmpB,fS0));
}

void SHEval2(const float *pX, const float *pY, const float *pZ, float *pSH)
{
    __m128 fX, fY, fZ;
    __m128 fC0, fC1, fS0, fS1, fTmpA, fTmpB, fTmpC;

    fX = _mm_load_ps(pX);
    fY = _mm_load_ps(pY);    
    fZ = _mm_load_ps(pZ);

    __m128 fZ2 = _mm_mul_ps(fZ,fZ);

    _mm_store_ps(pSH + 0 * 4,_mm_set_ps1(0.2820947917738781f));
    _mm_store_ps(pSH + 2 * 4,_mm_mul_ps(_mm_set_ps1(0.4886025119029199f),fZ));

    _mm_store_ps(pSH + 6 * 4,_mm_add_ps(_mm_mul_ps(_mm_set_ps1(0.9461746957575601f),fZ2),_mm_set_ps1(-0.31539156525252f)));
    fC0 = fX;
    fS0 = fY;

    fTmpA = _mm_set_ps1(0.48860251190292f);
    _mm_store_ps(pSH + 3 * 4,_mm_mul_ps(fTmpA,fC0));
    _mm_store_ps(pSH + 1 * 4,_mm_mul_ps(fTmpA,fS0));

    fTmpB = _mm_mul_ps(_mm_set_ps1(1.092548430592079f),fZ);
    _mm_store_ps(pSH + 7 * 4,_mm_mul_ps(fTmpB,fC0));
    _mm_store_ps(pSH + 5 * 4,_mm_mul_ps(fTmpB,fS0));

    fC1 = _mm_sub_ps(_mm_mul_ps(fX,fC0),_mm_mul_ps(fY,fS0));
    fS1 = _mm_add_ps(_mm_mul_ps(fX,fS0),_mm_mul_ps(fY,fC0));

    fTmpC = _mm_set_ps1(0.5462742152960395f);
    _mm_store_ps(pSH + 8 * 4,_mm_mul_ps(fTmpC,fC1));
    _mm_store_ps(pSH + 4 * 4,_mm_mul_ps(fTmpC,fS1));
}

void SHEval3(const float *pX, const float *pY, const float *pZ, float *pSH)
{
    __m128 fX, fY, fZ;
    __m128 fC0, fC1, fS0, fS1, fTmpA, fTmpB, fTmpC;

    fX = _mm_load_ps(pX);
    fY = _mm_load_ps(pY);    
    fZ = _mm_load_ps(pZ);

    __m128 fZ2 = _mm_mul_ps(fZ,fZ);

    _mm_store_ps(pSH + 0 * 4,_mm_set_ps1(0.2820947917738781f));
    _mm_store_ps(pSH + 2 * 4,_mm_mul_ps(_mm_set_ps1(0.4886025119029199f),fZ));

    _mm_store_ps(pSH + 6 * 4,_mm_add_ps(_mm_mul_ps(_mm_set_ps1(0.9461746957575601f),fZ2),_mm_set_ps1(-0.31539156525252f)));
    _mm_store_ps(pSH + 12 * 4,_mm_mul_ps(fZ,(_mm_add_ps(_mm_mul_ps(_mm_set_ps1(1.865881662950577f),fZ2),_mm_set_ps1(-1.119528997770346f)))));
    fC0 = fX;
    fS0 = fY;

    fTmpA = _mm_set_ps1(0.48860251190292f);
    _mm_store_ps(pSH + 3 * 4,_mm_mul_ps(fTmpA,fC0));
    _mm_store_ps(pSH + 1 * 4,_mm_mul_ps(fTmpA,fS0));

    fTmpB = _mm_mul_ps(_mm_set_ps1(1.092548430592079f),fZ);
    _mm_store_ps(pSH + 7 * 4,_mm_mul_ps(fTmpB,fC0));
    _mm_store_ps(pSH + 5 * 4,_mm_mul_ps(fTmpB,fS0));

    fTmpC = _mm_add_ps(_mm_mul_ps(_mm_set_ps1(2.285228997322329f),fZ2),_mm_set_ps1(-0.4570457994644658f));
    _mm_store_ps(pSH + 13 * 4,_mm_mul_ps(fTmpC,fC0));
    _mm_store_ps(pSH + 11 * 4,_mm_mul_ps(fTmpC,fS0));

    fC1 = _mm_sub_ps(_mm_mul_ps(fX,fC0),_mm_mul_ps(fY,fS0));
    fS1 = _mm_add_ps(_mm_mul_ps(fX,fS0),_mm_mul_ps(fY,fC0));

    fTmpA = _mm_set_ps1(0.5462742152960395f);
    _mm_store_ps(pSH + 8 * 4,_mm_mul_ps(fTmpA,fC1));
    _mm_store_ps(pSH + 4 * 4,_mm_mul_ps(fTmpA,fS1));

    fTmpB = _mm_mul_ps(_mm_set_ps1(1.445305721320277f),fZ);
    _mm_store_ps(pSH + 14 * 4,_mm_mul_ps(fTmpB,fC1));
    _mm_store_ps(pSH + 10 * 4,_mm_mul_ps(fTmpB,fS1));

    fC0 = _mm_sub_ps(_mm_mul_ps(fX,fC1),_mm_mul_ps(fY,fS1));
    fS0 = _mm_add_ps(_mm_mul_ps(fX,fS1),_mm_mul_ps(fY,fC1));

    fTmpC = _mm_set_ps1(0.5900435899266435f);
    _mm_store_ps(pSH + 15 * 4,_mm_mul_ps(fTmpC,fC0));
    _mm_store_ps(pSH + 9 * 4,_mm_mul_ps(fTmpC,fS0));
}
